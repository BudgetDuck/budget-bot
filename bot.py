import logging
logging.basicConfig(level=logging.DEBUG)
import gspread
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
import os
print("üîß Bot.py is starting...")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
GOOGLE_SHEET = os.getenv("BudgetBot")
print("üîë TOKEN:", BOT_TOKEN)
print("üìÑ SHEET:", GOOGLE_SHEET)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
gc = gspread.service_account(filename="credentials.json")
sheet = gc.open(GOOGLE_SHEET).sheet1

# Telegram ID ‚Üí –ò–º—è
user_map = {
    "katty_kattie": "–ö–∞—Ç—è",
    "AndreiSheleg": "–ê–Ω–¥—Ä–µ–π"
}

# –ü–ª–∞—Ç—ë–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ ‚Üí –í–∞–ª—é—Ç–∞
account_currency_map = {
    "PKO –ê–Ω–¥—Ä–µ–π PLN": "PLN", "PKO –ö–∞—Ç—è PLN": "PLN", "PKO –ö–∞—Ç—è EUR": "EUR",
    "–∫–∞—Ä—Ç–∞ Santander PLN": "PLN", "–∫–∞—Ä—Ç–∞ PEKAO PLN": "PLN", "–∫–∞—Ä—Ç–∞ MBank PLN": "PLN",
    "Revolut –ö–∞—Ç—è": "PLN",
    "–∫–∞—Ä—Ç–∞ –ü—Ä–∏–æ—Ä –ö–∞—Ç—è": "BYN", "–∫–∞—Ä—Ç–∞ –ü—Ä–∏–æ—Ä –ê–Ω–¥—Ä–µ—è": "BYN",
    "–Ω–∞–ª–∏—á–Ω—ã–µ BYN": "BYN", "–Ω–∞–ª–∏—á–Ω—ã–µ PLN": "PLN"
}

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
start_kb = ReplyKeyboardMarkup(resize_keyboard=True)
start_kb.add(
    KeyboardButton("–î–æ—Ö–æ–¥"),
    KeyboardButton("–†–∞—Å—Ö–æ–¥"),
    KeyboardButton("–ü–µ—Ä–µ–≤–æ–¥")
)

# –°—Ä–µ–¥—Å—Ç–≤–∞ –æ–ø–ª–∞—Ç—ã
payment_methods = ["–∫–∞—Ä—Ç–∞ MBank PLN"] + [x for x in account_currency_map.keys() if x != "–∫–∞—Ä—Ç–∞ MBank PLN"]
payment_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
for item in payment_methods:
    payment_kb.add(KeyboardButton(item))

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
expense_categories = {
    "–ñ–∏–ª—å–µ": ["–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ", "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "–ê—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–õ–µ–≥–∞–ª–∏–∑–∞—Ü–∏—è", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç", "–ú–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å", "–ö–∞—Ä—Ç–æ—á–∫–∏", "–ö—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏: —Ç–µ—Ö–Ω–∏–∫–∞, –º–µ–±–µ–ª—å –∏ –ø—Ä.", "–ü—Ä–æ—á–µ–µ"],
    "–ü–∏—Ç–∞–Ω–∏–µ": ["–û–±–µ–¥—ã", "–ü—Ä–æ—á–µ–µ"],
    "–ü—Ä–æ–µ–∑–¥": ["–ü—Ä–æ–µ–∑–¥–Ω–æ–π, —Ç–∞–ª–æ–Ω—ã", "–í–∏—Ç–µ–±—Å–∫, –°–æ–ª–∏–≥–æ—Ä—Å–∫", "–¢–∞–∫—Å–∏ –∏ –ø—Ä–æ—á–µ–µ"],
    "–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è": ["–ö–æ—Å–º–µ—Ç–∏–∫–∞", "–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è", "–ö–æ–ª–≥–æ—Ç–∫–∏, –Ω–æ—Å–∫–∏", "–ü—Ä–æ—á–µ–µ"],
    "–î–æ—Å—É–≥": ["–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –≤–∏–∑—ã", "–û–±—É—á–µ–Ω–∏–µ, –∫–Ω–∏–≥–∏", "–í—Å—Ç—Ä–µ—á–∏ —Å –¥—Ä—É–∑—å—è–º–∏ / –∫–æ–ª–ª–µ–≥–∞–º–∏", "–¢–µ–∞—Ç—Ä, –∫–∏–Ω–æ", "–ö–∞—Ñ–µ", "–ü—Ä–æ—á–µ–µ"],
    "–£—Ö–æ–¥ –∑–∞ —Å–æ–±–æ–π": ["–ú–∞–Ω–∏–∫—é—Ä/–ø–µ–¥–∏–∫—é—Ä", "–ü—Ä–∏—á–µ—Å–∫–∞, —Å—Ç—Ä–∏–∂–∫–∞", "–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥, —ç–ø–∏–ª—è—Ü–∏—è", "–ë–∞—Å—Å–µ–π–Ω, –≤–µ–ª–∏–∫, —Å–ø–æ—Ä—Ç", "–õ–µ—á–µ–Ω–∏–µ, –∞–ø—Ç–µ–∫–∏", "–ü—Ä–æ—á–µ–µ"],
    "–†–µ–±–µ–Ω–æ–∫": ["–ü–∏—Ç–∞–Ω–∏–µ", "–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è, –∞–ø—Ç–µ–∫–∞, –±—ã—Ç", "–û–¥–µ–∂–¥–∞, –æ–±—É–≤—å", "–ò–≥—Ä—É—à–∫–∏, —Ä–∞–∑–≤–∏–≤–∞—à–∫–∏, –∫–Ω–∏–≥–∏", "–î–µ—Ç—Å–∫–∏–π —Å–∞–¥", "–ü—Ä–æ—á–µ–µ"],
    "–ê–≤—Ç–æ–º–æ–±–∏–ª—å": ["–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏", "–¢–æ–ø–ª–∏–≤–æ", "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", "–ú–æ–π–∫–∞", "–†–µ–º–æ–Ω—Ç", "–ü—Ä–æ—á–µ–µ"],
    "–û–¥–µ–∂–¥–∞": ["–ù–∏–∂–Ω—è—è –æ–¥–µ–∂–¥–∞", "–ú–∞–π–∫–∏, —à–æ—Ä—Ç—ã, —Å–∞—Ä–∞—Ñ–∞–Ω—ã –∏ –ø—Ä.", "–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞", "–ö–æ—Ñ—Ç—ã, —à—Ç–∞–Ω—ã, –ø–ª–∞—Ç—å—è", "–û–±—É–≤—å", "–°—É–º–∫–∏, –≥–∞–ª–∞–Ω—Ç–µ—Ä–µ—è"],
    "–ü–æ–¥–∞—Ä–∫–∏": ["–†–æ–¥–Ω—ã–µ", "–ö—Ä–µ—Å—Ç–Ω–∏–∫–∏", "–î—Ä—É–∑—å—è", "–í –≥–æ—Å—Ç–∏", "–ö–æ–ª–ª–µ–≥–∏"],
    "–î–∏–∫–∞—è —É—Ç–∫–∞": ["–û–ø–ª–∞—Ç—ã –ú–±–∞–Ω–∫—É", "–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä—ã", "–ß—ã–Ω—à, –º–µ–¥–∏–∞, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–ú–µ–±–µ–ª—å, —Ç–µ—Ö–Ω–∏–∫–∞, —Ä–µ–º–æ–Ω—Ç", "–ü—Ä–æ—á–µ–µ"]
}
income_cat1 = ["–ö–∞—Ç—è", "–ê–Ω–¥—Ä–µ–π"]
income_cat2 = ["–ó–ü –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É", "–•–∞–ª—Ç—É—Ä–∞", "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è", "–ü–æ–¥–∞—Ä–∫–∏"]

# –ü–∞–º—è—Ç—å
user_data = {}

@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    await msg.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏?", reply_markup=start_kb)
    
@dp.message_handler(lambda msg: msg.text in ["–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥", "–ü–µ—Ä–µ–≤–æ–¥"])
async def step1(msg: types.Message):
    user_data[msg.from_user.id] = {
        "–¢–∏–ø": msg.text,
        "–ò–º—è": user_map.get(msg.from_user.username, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    }
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—á–∏—Å–ª–æ–º):")

@dp.message_handler(lambda msg: msg.text.replace(".", "").replace(",", "").replace("-", "").isdigit())
async def step2(msg: types.Message):
    data = user_data.get(msg.from_user.id)
    if not data:
        return await msg.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏")

    amount = abs(float(msg.text))
    data["–°—É–º–º–∞"] = amount

    if data["–¢–∏–ø"] == "–ü–µ—Ä–µ–≤–æ–¥":
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for method in payment_methods:
            kb.add(KeyboardButton(method))
        await msg.answer("–û—Ç–∫—É–¥–∞ –ø–µ—Ä–µ–≤–æ–¥?", reply_markup=kb)
    else:
        if data["–¢–∏–ø"] == "–†–∞—Å—Ö–æ–¥":
            amount = -amount
        data["–°—É–º–º–∞"] = amount
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_kb)

@dp.message_handler(lambda msg: user_data.get(msg.from_user.id, {}).get("–¢–∏–ø") == "–ü–µ—Ä–µ–≤–æ–¥" and "–û—Ç–∫—É–¥–∞" not in user_data.get(msg.from_user.id, {}))
async def step_transfer_from(msg: types.Message):
    data = user_data.get(msg.from_user.id)
    data["–û—Ç–∫—É–¥–∞"] = msg.text
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for method in payment_methods:
        kb.add(KeyboardButton(method))
    await msg.answer("–ö—É–¥–∞ –ø–µ—Ä–µ–≤–æ–¥?", reply_markup=kb)

@dp.message_handler(lambda msg: user_data.get(msg.from_user.id, {}).get("–¢–∏–ø") == "–ü–µ—Ä–µ–≤–æ–¥" and "–ö—É–¥–∞" not in user_data.get(msg.from_user.id, {}))
async def step_transfer_to(msg: types.Message):
    data = user_data.get(msg.from_user.id)
    data["–ö—É–¥–∞"] = msg.text
    now = datetime.now()
    user = data["–ò–º—è"]
    day, month, year = now.day, now.month, now.year
    amount = data["–°—É–º–º–∞"]
    from_acc = data["–û—Ç–∫—É–¥–∞"]
    to_acc = data["–ö—É–¥–∞"]
    currency = account_currency_map.get(from_acc, "")
    data["–í–∞–ª—é—Ç–∞"] = currency

    row1 = [user, day, month, year, -amount, currency, from_acc, "–ü–µ—Ä–µ–≤–æ–¥", "", "", ""]
    row2 = [user, day, month, year, amount, currency, to_acc, "–ü–µ—Ä–µ–≤–æ–¥", "", "", ""]

    sheet.append_row(row1)
    sheet.append_row(row2)

    await msg.answer("–ü–µ—Ä–µ–≤–æ–¥ –∑–∞–ø–∏—Å–∞–Ω. –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É.")
    await msg.answer("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é ‚Äî –≤—ã–±–µ—Ä–∏ /start", reply_markup=start_kb)
    user_data.pop(msg.from_user.id)
     
@dp.message_handler(lambda msg: msg.text in payment_methods and user_data.get(msg.from_user.id, {}).get("–¢–∏–ø") in ["–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥"] and "–û—Ç–∫—É–¥–∞" not in user_data.get(msg.from_user.id, {}))
async def step3_income_expense(msg: types.Message):
    data = user_data.get(msg.from_user.id)
    data["–°–ø–æ—Å–æ–±"] = msg.text
    data["–í–∞–ª—é—Ç–∞"] = account_currency_map.get(msg.text, "")
    cat_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if data["–¢–∏–ø"] == "–î–æ—Ö–æ–¥":
        for cat in income_cat1:
            cat_kb.add(KeyboardButton(cat))
    else:
        for cat in expense_categories.keys():
            cat_kb.add(KeyboardButton(cat))
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é 1:", reply_markup=cat_kb)

    now = datetime.now()
    user = data["–ò–º—è"]
    day, month, year = now.day, now.month, now.year
    amount = data["–°—É–º–º–∞"]
    from_acc = data["–û—Ç–∫—É–¥–∞"]
    to_acc = data["–ö—É–¥–∞"]
    data["–í–∞–ª—é—Ç–∞"] = account_currency_map.get(from_acc, "")
    currency = account_currency_map.get(from_acc, "")

    # –°—Ç—Ä–æ–∫–∞ "–æ—Ç–∫—É–¥–∞" ‚Äî —Å–æ –∑–Ω–∞–∫–æ–º –º–∏–Ω—É—Å
    row1 = [user, day, month, year, -amount, currency, from_acc, "–ü–µ—Ä–µ–≤–æ–¥", "", "", ""]
    # –°—Ç—Ä–æ–∫–∞ "–∫—É–¥–∞" ‚Äî —Å–æ –∑–Ω–∞–∫–æ–º –ø–ª—é—Å
    row2 = [user, day, month, year, amount, currency, to_acc, "–ü–µ—Ä–µ–≤–æ–¥", "", "", ""]

    sheet.append_row(row1)
    sheet.append_row(row2)

    await msg.answer("–ü–µ—Ä–µ–≤–æ–¥ –∑–∞–ø–∏—Å–∞–Ω. –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É.")
    await msg.answer("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é ‚Äî –≤—ã–±–µ—Ä–∏ /start", reply_markup=start_kb)
    user_data.pop(msg.from_user.id)
    
@dp.message_handler()
async def step4(msg: types.Message):
    data = user_data.get(msg.from_user.id)
    if data.get("–¢–∏–ø") == "–ü–µ—Ä–µ–≤–æ–¥":
        return
    if "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1" not in data:
        data["–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1"] = msg.text
        cat2_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        if data["–¢–∏–ø"] == "–î–æ—Ö–æ–¥":
            for c in income_cat2:
                cat2_kb.add(KeyboardButton(c))
        else:
            for c in expense_categories.get(msg.text, ["–ü—Ä–æ—á–µ–µ"]):
                cat2_kb.add(KeyboardButton(c))
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é 2:", reply_markup=cat2_kb)
    elif "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 2" not in data:
        data["–ö–∞—Ç–µ–≥–æ—Ä–∏—è 2"] = msg.text
        await msg.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    elif "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" not in data:
        data["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"] = msg.text
        now = datetime.now()
        row = [
            data["–ò–º—è"],
            now.day,
            now.month,
            now.year,
            data["–°—É–º–º–∞"],
            data["–í–∞–ª—é—Ç–∞"],
            data["–°–ø–æ—Å–æ–±"],
            data["–¢–∏–ø"],
            data["–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1"],
            data["–ö–∞—Ç–µ–≥–æ—Ä–∏—è 2"],
            data["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]
        ]
        sheet.append_row(row)
        await msg.answer("–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞. –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É.")
        await msg.answer("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é - –≤—ã–±–µ—Ä–∏ /start", reply_markup=start_kb)
        user_data.pop(msg.from_user.id)

from aiogram import executor 

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
